// https://leetcode.com/problems/falling-squares/

// On an infinite number line (x-axis), we drop given squares in the order they are given.
//
// The i-th square dropped (positions[i] = (left, side_length)) is a square with the left-most point being positions[i][0] and sidelength positions[i][1].
//
// The square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.
//
// The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.
//
//
// Return a list ans of heights. Each height ans[i] represents the current highest height of any square we have dropped, after dropping squares represented by positions[0], positions[1], ..., positions[i].

// fallingSquares :: [[Number]] -> Number
const fallingSquares = positions => {
    const result = [];

    // this will store the limits of fallen squares plus their height [[left limit, right limit], height]
    const hash = [];

    // this will store the highest point in the whole plane after each square drop
    let maxHeight = 0;

    const N = positions.length;
    for(let i = 0; i < N; i++) {
        const [left, size] = positions[i];
        const right = left + size;

        // this will store the highest point, and it's limits, that is generated by a fallen square
        let localMaxHeight = 0;
        let localMaxHeightLimits = [];

        let intersected = false;

        for(let i = 0; i < hash.length; i++) {
            const [[nextLeft, nextRight], nextSize] = hash[i];

            const intersect = nextLeft < right && left < nextRight;

            if(intersect) {
                const value = nextSize + size;
                if(value > localMaxHeight) {
                    localMaxHeight = value;
                    localMaxHeightLimits = [left, right];
                }
                intersected = true;
            }
        }

        if(!intersected) {
            if(size > localMaxHeight) {
                localMaxHeight = size;
                localMaxHeightLimits = [left, right];
            }
        }

        // we store the current limits and height that resulted at this position (square drop)
        hash.push([localMaxHeightLimits, localMaxHeight]);

        // we check if the highest point generated by the square that was on this position is the highest in the whole plane
        maxHeight = Math.max(localMaxHeight, maxHeight);

        // we add the current highest point that exists in the place at this current position
        result.push(maxHeight);
    }

    return result;
};
